/*
 * Logger.cpp
 *
 *  Created on: 14/04/2015
 *      Author: raulMrello
 */

#include "Logger.h"

//------------------------------------------------------------------------------------
//-- PRIVATE TYPEDEFS ----------------------------------------------------------------
//------------------------------------------------------------------------------------

//------------------------------------------------------------------------------------
//-- PRIVATE DEFINITIONS -------------------------------------------------------------
//------------------------------------------------------------------------------------

//------------------------------------------------------------------------------------
//-- STATIC FUNCTIONS ----------------------------------------------------------------
//------------------------------------------------------------------------------------

//------------------------------------------------------------------------------------
//-- PUBLIC FUNCTIONS ----------------------------------------------------------------
//------------------------------------------------------------------------------------

Logger::Logger(RawSerial *serial) {
	_pool = 0;
	_poolsize = 0;
	_poolpos = 0;
	_serial = serial;
	_serial->baud(115200);
}

Logger::Logger(char *pool, int size) {
	_serial = 0;
	_pool = pool;
	_poolsize = size;
	_poolpos = 0;	
}

//------------------------------------------------------------------------------------
Logger::~Logger() {
	// TODO Auto-generated destructor stub
}

//------------------------------------------------------------------------------------
void Logger::sprintf(char * text, int value) {
	char d[64];
	std::sprintf(d, text, value);
	print(d, strlen(d));	
}
//------------------------------------------------------------------------------------
void Logger::print(char * text, int len) {
	_mutex.lock();
	if(_serial){
		for(int i=0;i<len;i++){
			_serial->putc(text[i]);
		}
	}
	else if(_pool){
		for(int i=0;i<len;i++){
			if(_poolpos >= _poolsize)
				_poolpos = 0;
			_pool[_poolpos] = text[i];
			_poolpos++;
		}
		if(_poolpos < (_poolsize-32)){
			int k = _poolpos;
			for(int i=0;i < 32;i++){
				_pool[k++] = '.';
			}
		}
		else{
			for(int i=0;i < 32;i++){
				_pool[i] = '.';
			}
		}
	}
	_mutex.unlock();
}

//------------------------------------------------------------------------------------
//-- PROTECTED/PRIVATE FUNCTIONS -----------------------------------------------------
//------------------------------------------------------------------------------------


